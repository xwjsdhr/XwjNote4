package com.xwj.xwjnote4.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.xwj.xwjnote4.model.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE".
*/
public class NoteDao extends AbstractDao<Note, String> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Favorite = new Property(3, boolean.class, "favorite", false, "FAVORITE");
        public final static Property NoteType = new Property(4, String.class, "noteType", false, "NOTE_TYPE");
        public final static Property LayoutType = new Property(5, int.class, "layoutType", false, "LAYOUT_TYPE");
        public final static Property CreateTime = new Property(6, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property LastModifiedTime = new Property(7, java.util.Date.class, "lastModifiedTime", false, "LAST_MODIFIED_TIME");
        public final static Property UserAuth = new Property(8, String.class, "userAuth", false, "USER_AUTH");
        public final static Property HasSync = new Property(9, boolean.class, "hasSync", false, "HAS_SYNC");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"CONTENT\" TEXT NOT NULL ," + // 2: content
                "\"FAVORITE\" INTEGER NOT NULL ," + // 3: favorite
                "\"NOTE_TYPE\" TEXT NOT NULL ," + // 4: noteType
                "\"LAYOUT_TYPE\" INTEGER NOT NULL ," + // 5: layoutType
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 6: createTime
                "\"LAST_MODIFIED_TIME\" INTEGER NOT NULL ," + // 7: lastModifiedTime
                "\"USER_AUTH\" TEXT NOT NULL ," + // 8: userAuth
                "\"HAS_SYNC\" INTEGER NOT NULL );"); // 9: hasSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getContent());
        stmt.bindLong(4, entity.getFavorite() ? 1L: 0L);
        stmt.bindString(5, entity.getNoteType());
        stmt.bindLong(6, entity.getLayoutType());
        stmt.bindLong(7, entity.getCreateTime().getTime());
        stmt.bindLong(8, entity.getLastModifiedTime().getTime());
        stmt.bindString(9, entity.getUserAuth());
        stmt.bindLong(10, entity.getHasSync() ? 1L: 0L);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // content
            cursor.getShort(offset + 3) != 0, // favorite
            cursor.getString(offset + 4), // noteType
            cursor.getInt(offset + 5), // layoutType
            new java.util.Date(cursor.getLong(offset + 6)), // createTime
            new java.util.Date(cursor.getLong(offset + 7)), // lastModifiedTime
            cursor.getString(offset + 8), // userAuth
            cursor.getShort(offset + 9) != 0 // hasSync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setFavorite(cursor.getShort(offset + 3) != 0);
        entity.setNoteType(cursor.getString(offset + 4));
        entity.setLayoutType(cursor.getInt(offset + 5));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLastModifiedTime(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUserAuth(cursor.getString(offset + 8));
        entity.setHasSync(cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Note entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
